# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - 'master'

variables:
  - group: 'AzFunctionsAppVariableGroup'

pool:
  vmImage: ubuntu-18.04

steps:
- task: UsePythonVersion@0
  displayName: "Setting python version to 3.7"
  inputs:
    versionSpec: '3.7'
    architecture: 'x64'

- bash: |
    if [ -f extensions.csproj ]
    then
        dotnet build extensions.csproj --output ./bin
    fi
    tree -a .
    python -m pip install --upgrade pip
    pip install --target="./functions/.python_packages/lib/site-packages" -r ./functions/requirements.txt
    tree -a .

- task: ArchiveFiles@2
  displayName: "Archive files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
    artifactName: 'drop'

- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'ARM Template deployment: Resource Group scope'
  inputs:
    azureResourceManagerConnection: $(serviceConnectionName)
    subscriptionId: $(subscriptionId)
    resourceGroupName: $(resourceGroupName)
    location: $(resourceGroupLocation)
    csmFile: 'deployment_template.json'
    overrideParameters: '-appName $(appName) -storageAcctName $(storageAcctName) -hostingPlanName $(hostingPlanName)'

- task: AzureFunctionApp@1
  inputs:
    azureSubscription: $(serviceConnectionName)
    appType: 'functionAppLinux'
    appName: $(appName)
    package: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
    runtimeStack: 'PYTHON|3.7'
    